name: Sync Study Content from Obsidian

on:
  workflow_dispatch:  # 수동으로 트리거 가능
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행

jobs:
  sync-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: softourr/obsidian
          path: source-repo
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up environment
        run: |
          sudo timedatectl set-timezone Asia/Seoul
          # 로케일 설정 (한글 지원)
          sudo apt-get update && sudo apt-get install -y locales
          sudo locale-gen ko_KR.UTF-8
          echo "LC_ALL=ko_KR.UTF-8" >> $GITHUB_ENV
          echo "LANG=ko_KR.UTF-8" >> $GITHUB_ENV
          
          # 디버깅 목적으로 전체 파일 리스트 출력
          echo "===== Obsidian Study 폴더의 모든 마크다운 파일 ====="
          find source-repo/Study -name "*.md" | sort

      - name: Create target directory
        run: |
          mkdir -p src/content/posts

      - name: Sync markdown files
        run: |
          # 마지막 실행 시간 확인
          TIMESTAMP_FILE=".last_sync_time"
          if [ -f "$TIMESTAMP_FILE" ]; then
            LAST_RUN=$(cat "$TIMESTAMP_FILE")
          else
            # 처음 실행 시 어제 날짜 사용
            LAST_RUN=$(date -d "yesterday" +"%Y-%m-%d %H:%M:%S")
          fi
          
          echo "마지막 동기화: $LAST_RUN"
          
          # 모든 마크다운 파일을 직접 처리 (한글 파일명 문제 우회)
          echo "모든 마크다운 파일을 처리합니다..."
          
          find source-repo/Study -type f -name "*.md" | while read src_path; do
            # 상대 경로 추출
            rel_path="${src_path#source-repo/}"
            
            echo "처리 중: $rel_path"
            
            # Study 다음 폴더명 추출 (카테고리용)
            category=$(echo "$rel_path" | awk -F'/' '{print $2}')
            if [ -z "$category" ]; then
              category="Study"
            fi
            
            # 파일명 추출
            filename=$(basename "$src_path")
            dest_file="src/content/posts/$filename"
            
            # 파일 제목 추출 (확장자 제거)
            title=$(basename "$filename" .md | sed 's/_/ /g' | sed 's/-/ /g')
            
            # 수정 날짜 가져오기
            modified_date=$(git -C source-repo log -1 --format=%ad --date=format:"%Y-%m-%d" -- "$rel_path" 2>/dev/null)
            if [ -z "$modified_date" ]; then
              modified_date=$(date +"%Y-%m-%d")
            fi
            
            # 프론트매터 생성 및 파일 복사
            echo "---" > "$dest_file"
            echo "title: \"$title\"" >> "$dest_file"
            echo "published: $modified_date" >> "$dest_file"
            echo "tags: [$category, Study]" >> "$dest_file"
            echo "category: $category" >> "$dest_file"
            echo "draft: false" >> "$dest_file"
            echo "---" >> "$dest_file"
            
            # 기존 프론트매터가 있으면 제거하고 내용만 추가
            if grep -q "^---" "$src_path"; then
              # 프론트매터 제거하고 내용만 추출
              sed -e '1{/^---$/!q;};1,/^---$/d' "$src_path" >> "$dest_file"
            else
              # 프론트매터 없으면 전체 내용 추가
              cat "$src_path" >> "$dest_file"
            fi
            
            echo "✅ 생성 완료: $dest_file (카테고리: $category)"
          done
          
          # 생성된 파일 목록 출력
          echo "===== 생성된 파일 목록 ====="
          ls -la src/content/posts/
          
          # 현재 시간을 타임스탬프 파일에 저장
          date +"%Y-%m-%d %H:%M:%S" > "$TIMESTAMP_FILE"

      - name: Commit changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src/content/posts/ .last_sync_time
          
          if git diff --staged --quiet; then
            echo "커밋할 변경사항이 없습니다"
          else
            git commit -m "Obsidian Study 동기화 ($(date +"%Y-%m-%d %H:%M:%S"))"
            git push
          fi
