name: Sync Study Content and Update README

on:
  workflow_dispatch:  # 수동으로 트리거 가능
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행

jobs:
  sync-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: softourr/obsidian
          path: source-repo
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up environment
        run: |
          sudo timedatectl set-timezone Asia/Seoul
          # 로케일 설정 (한글 지원)
          sudo apt-get update && sudo apt-get install -y locales
          sudo locale-gen ko_KR.UTF-8
          echo "LC_ALL=ko_KR.UTF-8" >> $GITHUB_ENV
          echo "LANG=ko_KR.UTF-8" >> $GITHUB_ENV

      - name: Create target directory
        run: |
          mkdir -p src/content/posts

      - name: Sync markdown files
        id: sync-files
        run: |
          # 변경된 파일 목록을 저장할 배열 초기화
          declare -a PROCESSED_FILES
          declare -a CATEGORY_LIST
          
          # 마지막 실행 시간 확인
          TIMESTAMP_FILE=".last_sync_time"
          if [ -f "$TIMESTAMP_FILE" ]; then
            LAST_RUN=$(cat "$TIMESTAMP_FILE")
          else
            # 처음 실행 시 어제 날짜 사용
            LAST_RUN=$(date -d "yesterday" +"%Y-%m-%d %H:%M:%S")
          fi
          
          echo "마지막 동기화: $LAST_RUN"
          
          # 모든 마크다운 파일을 직접 처리
          echo "마크다운 파일을 처리합니다..."
          
          find source-repo/Study -type f -name "*.md" | while read src_path; do
            # 상대 경로 추출
            rel_path="${src_path#source-repo/}"
            
            echo "처리 중: $rel_path"
            
            # Study 다음 폴더명 추출 (카테고리용)
            category=$(echo "$rel_path" | awk -F'/' '{print $2}')
            if [ -z "$category" ]; then
              category="Study"
            fi
            
            # 카테고리 목록에 추가 (중복 없이)
            if [[ ! " ${CATEGORY_LIST[@]} " =~ " ${category} " ]]; then
              CATEGORY_LIST+=("$category")
              
              # 카테고리 디렉토리 생성
              mkdir -p "src/content/posts/$category"
              echo "카테고리 디렉토리 생성: src/content/posts/$category"
            fi
            
            # 파일명 추출
            filename=$(basename "$src_path")
            # 카테고리별 하위 디렉토리에 파일 저장
            dest_file="src/content/posts/$category/$filename"
            
            # 파일 제목 추출 (확장자 제거)
            title=$(basename "$filename" .md | sed 's/_/ /g' | sed 's/-/ /g')
            
            # 수정 날짜 가져오기
            modified_date=$(git -C source-repo log -1 --format=%ad --date=format:"%Y-%m-%d" -- "$rel_path" 2>/dev/null)
            if [ -z "$modified_date" ]; then
              modified_date=$(date +"%Y-%m-%d")
            fi
            
            # 프론트매터 생성 및 파일 복사
            echo "---" > "$dest_file"
            echo "title: \"$title\"" >> "$dest_file"
            echo "published: $modified_date" >> "$dest_file"
            echo "tags: [$category, Study]" >> "$dest_file"
            echo "category: $category" >> "$dest_file"
            echo "draft: false" >> "$dest_file"
            echo "---" >> "$dest_file"
            
            # 기존 프론트매터가 있으면 제거하고 내용만 추가
            if grep -q "^---" "$src_path"; then
              # 프론트매터 제거하고 내용만 추출
              sed -e '1{/^---$/!q;};1,/^---$/d' "$src_path" >> "$dest_file"
            else
              # 프론트매터 없으면 전체 내용 추가
              cat "$src_path" >> "$dest_file"
            fi
            
            # 처리된 파일 정보 저장 (카테고리, 제목, 파일명)
            PROCESSED_FILES+=("$category|$title|$filename")
            
            echo "✅ 생성 완료: $dest_file (카테고리: $category)"
          done
          
          # 처리된 파일 정보를 파일에 저장 (다음 단계에서 사용)
          printf "%s\n" "${PROCESSED_FILES[@]}" > processed_files.txt
          printf "%s\n" "${CATEGORY_LIST[@]}" > category_list.txt
          
          # 현재 시간을 타임스탬프 파일에 저장
          date +"%Y-%m-%d %H:%M:%S" > "$TIMESTAMP_FILE"
          
          # 디렉토리 구조 출력 (디버깅용)
          echo "===== 디렉토리 구조 ====="
          find src/content/posts -type d | sort

      - name: Update README.md
        run: |
          # 처리된 파일 정보와 카테고리 목록 읽기
          PROCESSED_FILES=$(cat processed_files.txt)
          CATEGORY_LIST=$(cat category_list.txt)
          
          # README.md 파일 생성
          cat > README.md << EOL
          # Study Notes
          
          이 레포지토리는 Study 노트를 자동으로 동기화합니다. 마지막 업데이트: $(date +"%Y-%m-%d %H:%M:%S")
          
          ## 목차
          
          EOL
          
          # 카테고리별 목차 추가
          for category in $CATEGORY_LIST; do
            echo "- [${category}](#${category,,})" >> README.md  # 소문자로 변환한 앵커
          done
          
          echo "" >> README.md  # 빈 줄 추가
          
          # 카테고리별로 파일 목록 추가
          for category in $CATEGORY_LIST; do
            echo -e "\n## ${category}\n" >> README.md
            
            echo "$PROCESSED_FILES" | grep "^${category}|" | while read line; do
              IFS='|' read -r cat title filename <<< "$line"
              # 파일명에서 확장자 제거 (URL 경로용)
              slug=${filename%.md}
              # 블로그 URL 생성 (실제 경로 구조에 맞게 수정)
              blog_url="https://softourr.github.io/posts/${slug}/"
              
              echo "- [${title}](${blog_url})" >> README.md
            done
          done
          
          # README.md 내용 출력 (디버깅용)
          echo "===== README.md 내용 ====="
          cat README.md
          
          # 임시 파일 삭제
          rm processed_files.txt category_list.txt

      - name: Commit changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src/content/posts/ README.md .last_sync_time
          
          if git diff --staged --quiet; then
            echo "커밋할 변경사항이 없습니다"
          else
            git commit -m "Obsidian Study 동기화 및 README 업데이트 ($(date +"%Y-%m-%d %H:%M:%S"))"
            git push
          fi
