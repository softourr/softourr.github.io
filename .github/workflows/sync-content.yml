name: Sync Study Content from Obsidian

on:
  workflow_dispatch:  # 수동으로 트리거 가능
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행

jobs:
  sync-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: softourr/obsidian
          path: source-repo
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set timezone to KST
        run: |
          sudo timedatectl set-timezone Asia/Seoul

      - name: Create target directory
        run: |
          mkdir -p src/content/posts

      - name: Sync markdown files
        run: |
          # 마지막 실행 시간 확인
          TIMESTAMP_FILE=".last_sync_time"
          if [ -f "$TIMESTAMP_FILE" ]; then
            LAST_RUN=$(cat "$TIMESTAMP_FILE")
          else
            # 처음 실행 시 어제 날짜 사용
            LAST_RUN=$(date -d "yesterday" +"%Y-%m-%d %H:%M:%S")
          fi
          
          echo "마지막 동기화: $LAST_RUN"
          
          # 소스 레포지토리의 Study 폴더에서 변경된 마크다운 파일 찾기
          cd source-repo
          CHANGED_FILES=$(git log --since="$LAST_RUN" --name-only --pretty=format: | grep -E "^Study/.*\.md$" | sort -u)
          cd ..
          
          # 변경된 파일이 없으면 전체 파일 처리 (첫 실행 시)
          if [ -z "$CHANGED_FILES" ]; then
            echo "변경된 파일이 없거나 첫 실행입니다. 모든 마크다운 파일을 확인합니다."
            CHANGED_FILES=$(find source-repo/Study -type f -name "*.md" | sed 's|^source-repo/||')
          fi
          
          # 각 파일 처리
          for file in $CHANGED_FILES; do
            echo "처리 중: $file"
            
            # Study 다음 폴더명 추출 (카테고리용)
            category=$(echo "$file" | sed -n 's|^Study/\([^/]*\)/.*|\1|p')
            if [ -z "$category" ]; then
              category="Study"
            fi
            
            # 파일명 추출
            filename=$(basename "$file")
            dest_file="src/content/posts/$filename"
            
            # 파일 제목 추출
            title=$(echo "$filename" | sed 's/\.md$//' | sed 's/_/ /g' | sed 's/-/ /g')
            
            # 수정 날짜 가져오기
            modified_date=$(git -C source-repo log -1 --format=%ad --date=format:"%Y-%m-%d" -- "$file")
            if [ -z "$modified_date" ]; then
              modified_date=$(date +"%Y-%m-%d")
            fi
            
            # 프론트매터 생성 및 파일 복사
            {
              echo "---"
              echo "title: \"$title\""
              echo "published: $modified_date"
              echo "tags: [$category, Study]"
              echo "category: $category"
              echo "draft: false"
              echo "---"
              
              # 기존 프론트매터가 있으면 제거
              if grep -q "^---" "source-repo/$file"; then
                sed -e '1{/^---$/!q;};1,/^---$/d' "source-repo/$file"
              else
                cat "source-repo/$file"
              fi
            } > "$dest_file"
            
            echo "✅ 생성 완료: $dest_file (카테고리: $category)"
          done
          
          # 현재 시간을 타임스탬프 파일에 저장
          date +"%Y-%m-%d %H:%M:%S" > "$TIMESTAMP_FILE"

      - name: Commit changes
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src/content/posts/ .last_sync_time
          
          if git diff --staged --quiet; then
            echo "커밋할 변경사항이 없습니다"
          else
            git commit -m "Obsidian Study 동기화 ($(date +"%Y-%m-%d %H:%M:%S"))"
            git push
          fi
