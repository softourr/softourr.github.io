name: Sync Javascript Content from Obsidian

on:
  workflow_dispatch:  # 수동으로 트리거 가능
  schedule:
    - cron: '0 */6 * * *'  # 6시간마다 실행

jobs:
  sync-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout blog repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: softourr/obsidian  # 소스 레포지토리 경로
          path: source-repo
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0  # 전체 히스토리 가져오기

      - name: Set timezone to KST
        run: |
          sudo timedatectl set-timezone Asia/Seoul
          echo "Current time (KST): $(date)"

      - name: Verify source repository
        run: |
          echo "Checking source repository structure..."
          ls -la source-repo
          
          echo "Checking Javascript folder..."
          find source-repo -path "*/Study/Javascript" -type d || echo "Study/Javascript directory not found"
          
          echo "Checking all Markdown files in repository..."
          find source-repo -name "*.md" | grep -i javascript || echo "No Javascript markdown files found"

      - name: Create target directory if not exists
        run: |
          mkdir -p src/content/posts  # 대상 폴더

      - name: Copy and process markdown files
        run: |
          # Study/Javascript 폴더의 마크다운 파일 찾기
          MARKDOWN_FILES=$(find source-repo/Study/Javascript -name "*.md" || echo "")
          
          if [ -z "$MARKDOWN_FILES" ]; then
            echo "🔴 마크다운 파일을 찾을 수 없습니다. 소스 경로를 확인하세요."
            
            # 전체 저장소에서 마크다운 파일 검색 (디버깅용)
            echo "전체 저장소에서 마크다운 파일 검색:"
            find source-repo -name "*.md" | head -n 10
            exit 1
          fi
          
          echo "🟢 처리할 마크다운 파일: $(echo "$MARKDOWN_FILES" | wc -l)개"
          
          # 각 파일 처리
          for src_file in $MARKDOWN_FILES; do
            filename=$(basename "$src_file")
            dest_file="src/content/posts/$filename"
            
            echo "🔄 처리 중: $src_file -> $dest_file"
            
            # 파일 제목 추출 (파일명에서)
            title=$(echo "$filename" | sed 's/\.md$//' | sed 's/_/ /g' | sed 's/-/ /g')
            
            # 수정 날짜 가져오기 (KST 기준)
            modified_date=$(git -C source-repo log -1 --format=%ad --date=format:"%Y-%m-%d" -- "$src_file" || date +"%Y-%m-%d")
            
            # 프론트매터 확인 및 처리
            if grep -q "^---" "$src_file"; then
              echo "- 기존 프론트매터 제거 및 새 프론트매터 추가"
              # 기존 프론트매터 제거 후 새 프론트매터 추가
              content=$(sed -e '1{/^---$/!q;};1,/^---$/d' "$src_file")
              
              {
                echo "---"
                echo "title: $title"
                echo "published: $modified_date"
                echo "tags: [Javascript, Study]"
                echo "category: Javascript"
                echo "draft: true"
                echo "---"
                echo "$content"
              } > "$dest_file"
            else
              echo "- 새 프론트매터 추가"
              # 프론트매터가 없는 경우 추가
              {
                echo "---"
                echo "title: $title"
                echo "published: $modified_date"
                echo "tags: [Javascript, Study]"
                echo "category: Javascript"
                echo "draft: true"
                echo "---"
                cat "$src_file"
              } > "$dest_file"
            fi
            
            echo "✅ 파일 생성 완료: $dest_file"
          done

      - name: List processed files
        run: |
          echo "생성된 파일 목록:"
          ls -la src/content/posts/
          echo "총 파일 수: $(find src/content/posts -type f | wc -l)"

      - name: Commit changes if any
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add src/content/posts/
          
          # 변경사항 확인
          git status
          
          if git diff --staged --quiet; then
            echo "커밋할 변경사항이 없습니다"
          else
            git commit -m "Obsidian Javascript 학습 노트 동기화 (KST: $(date +"%Y-%m-%d %H:%M:%S"))"
            git push
            echo "✅ 변경사항을 성공적으로 커밋하고 푸시했습니다"
          fi
